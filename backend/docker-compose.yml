services:
  backend:
    build: .
    environment:
      - NODE_ENV=${NODE_ENV}
      - LISTEN_PORT=${LISTEN_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - ACCESS_TOKEN_TTL=${ACCESS_TOKEN_TTL}
      - REFRESH_TOKEN_TTL=${REFRESH_TOKEN_TTL}
      - SEED_USER_USERNAME=${SEED_USER_USERNAME}
      - SEED_USER_PASSWORD=${SEED_USER_PASSWORD}
      - TG_BOT_API_KEY=${TG_BOT_API_KEY}
      - TG_CHAT_ID=${TG_CHAT_ID}
    ports:
      - '${LISTEN_PORT}:${LISTEN_PORT}'
    # volumes:
    #   - ./public:/app/public
    depends_on:
      - postgres

  postgres:
    image: postgres:17.4
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db-backups:/var/db-backups
    ports:
      - '${DB_PORT}:${DB_PORT}'
    # restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - '443:443'
    depends_on:
      - backend

  # Нужно установить postgresql-client
  # backup:
  #   image: alpine:latest
  #   volumes:
  #     - pg_data:/pg_data
  #     - pg_backups:/backups
  #   entrypoint: >
  #     sh -c "
  #       pg_dump -U ${DB_USERNAME} -h postgres ${DB_NAME} > /backups/backup_$(date +\%Y\%m\%d\%H\%M).sql
  #     "
  #   environment:
  #     - DB_USERNAME=${DB_USERNAME}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_NAME=${DB_NAME}
  #   depends_on:
  #     - postgres

volumes:
  pg_data:
  # pg_backups:
